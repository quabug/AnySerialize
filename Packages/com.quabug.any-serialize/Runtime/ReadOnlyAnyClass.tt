<#@ template language="C#" #>

using System;
using UnityEngine;

namespace AnySerialize
{
<#
    for (var i = 1; i < 21; i++)
    {
#>
    [Serializable, AnySerializePriority(10000)]
    public class ReadOnlyAnyClass<T<# for (var n = 0; n < i; n++) { #>, [AnyFieldType(nameof(T))] T<#= n #><# } #><# for (var n = 0; n < i; n++) { #>, [AnyConstraintType] TAny<#= n #><# } #>> : IReadOnlyAnyClass<T>
        where T : new()
<#
        for (var n = 0; n < i; n++)
        {
#>
        where TAny<#= n #> : IReadOnlyAny<T<#= n #>>
<#
        }
#>
    {
        private object? _cache;
        
<#
        for (var n = 0; n < i; n++)
        {
#>
        [SerializeField] private TAny<#= n #> _field<#= n #> = default!;
<#
        }
#>

        public T Value
        {
            get
            {
#if !UNITY_EDITOR
                if (_cache != null) return (T)_cache;
#endif
<# // TODO: optimize set value of struct by `__makeref` and `SetValueDirect`? #>
                _cache ??= new T();
                var fields = AnyClassUtility.GetOrderedFields<T>();
<#
        for (var n = 0; n < i; n++)
        {
#>
                fields[<#= n #>].SetValue(_cache, _field<#= n #>.Value);
<#
        }
#>
                return (T)_cache;
            }
        }
    }

<#
    }
#>
}
