<#@ template language="C#" #>

using System;
using UnityEngine;
using Unity.Assertions;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;

namespace AnySerialize.Blob
{
<#
    for (var i = 1; i < 21; i++)
    {
#>
    [Serializable, AnySerializePriority(AnySerializePriorityAttribute.AnyClassPriority)]
    public class ReadOnlyAnyBlobStruct<T<# for (var n = 0; n < i; n++) { #>, [AnyFieldType(nameof(T))] T<#= n #><# } #><# for (var n = 0; n < i; n++) { #>, [AnyPropertyCodeGenOrConstraintType(nameof(T))] TAny<#= n #><# } #>> : IReadOnlyAnyBlob<T>
        where T : unmanaged
<#
        for (var n = 0; n < i; n++)
        {
#>
        where T<#= n #> : unmanaged
<#
        }
#>
<#
        for (var n = 0; n < i; n++)
        {
#>
        where TAny<#= n #> : IReadOnlyAnyBlob<T<#= n #>>
<#
        }
#>
    {
<#
        for (var n = 0; n < i; n++)
        {
#>
        [SerializeField] private TAny<#= n #> _field<#= n #> = default!;
<#
        }
#>

        public unsafe void Build(ref BlobBuilder builder, ref T data)
        {
            var dataPtr = (byte*)UnsafeUtility.AddressOf(ref data);
            var fields = AnyClassUtility.GetOrderedFields<T>();
            Assert.AreEqual(fields.Count, <#= i #>);
<#
        for (var n = 0; n < i; n++)
        {
#>

            var fieldOffset<#= n #> = UnsafeUtility.GetFieldOffset(fields[<#= n #>]);
            ref var fieldData<#= n #> = ref UnsafeUtility.AsRef<T<#= n #>>(dataPtr + fieldOffset<#= n #>);
            _field<#= n #>.Build(ref builder, ref fieldData<#= n #>);
<#
        }
#>
        }
    }

<#
    }
#>
}
